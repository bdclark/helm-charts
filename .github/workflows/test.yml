name: Test Helm Charts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  HELM_VERSION: v3.14.0
  TASK_VERSION: v3.34.1

jobs:
  lint-and-unit-test:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: ${{ env.TASK_VERSION }}

      - name: Install testing tools
        run: task install-tools

      - name: Run linting
        run: task lint

      - name: Run unit tests
        run: task test-unit

      - name: Test template rendering
        run: task test-template

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rendered-templates
          path: /tmp/helm-test/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'mosquitto/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-unit-test
    strategy:
      matrix:
        k8s-version: 
          - v1.28.0
          - v1.29.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: ${{ env.TASK_VERSION }}

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:${{ matrix.k8s-version }}
          cluster_name: mosquitto-test
          config: |
            kind: Cluster
            apiVersion: kind.x-k8s.io/v1alpha4
            nodes:
            - role: control-plane
            - role: worker

      - name: Install helm-unittest
        run: helm plugin install https://github.com/helm-unittest/helm-unittest.git

      - name: Run integration tests
        run: task test-integration

      - name: Debug on failure
        if: failure()
        run: |
          echo "=== Cluster Info ==="
          kubectl cluster-info
          echo "=== All Pods ==="
          kubectl get pods --all-namespaces
          echo "=== Events ==="
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
          echo "=== Mosquitto Logs ==="
          kubectl logs -l app.kubernetes.io/name=mosquitto --all-namespaces || true

  chart-testing:
    name: Chart Testing (ct)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2

      - name: Run chart-testing (list)
        id: list
        run: |
          changed=$(ct list --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Create k8s Kind Cluster
        if: steps.list.outputs.changed == 'true'
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:v1.29.0

      - name: Run chart-testing (install)
        if: steps.list.outputs.changed == 'true'
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-unit-test, integration-test, chart-testing]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: ${{ env.TASK_VERSION }}

      - name: Package chart
        run: task package

      - name: Upload chart package
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: mosquitto-*.tgz
          retention-days: 30

  # Optional: Auto-release on version bump
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: release-validation
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for version bump
        id: version-check
        run: |
          # Get current version from Chart.yaml
          CURRENT_VERSION=$(grep '^version:' mosquitto/Chart.yaml | cut -d' ' -f2)
          
          # Check if this version has been tagged
          if git tag -l | grep -q "mosquitto-v${CURRENT_VERSION}"; then
            echo "Version $CURRENT_VERSION already tagged"
            echo "release=false" >> "$GITHUB_OUTPUT"
          else
            echo "New version $CURRENT_VERSION detected"
            echo "release=true" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Helm
        if: steps.version-check.outputs.release == 'true'
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install Task
        if: steps.version-check.outputs.release == 'true'
        uses: arduino/setup-task@v1
        with:
          version: ${{ env.TASK_VERSION }}

      - name: Package chart
        if: steps.version-check.outputs.release == 'true'
        run: task package

      - name: Create Release
        if: steps.version-check.outputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: mosquitto-v${{ steps.version-check.outputs.version }}
          name: Mosquitto Chart v${{ steps.version-check.outputs.version }}
          files: mosquitto-*.tgz
          generate_release_notes: true
          body: |
            ## Mosquitto Helm Chart Release v${{ steps.version-check.outputs.version }}
            
            ### Installation
            ```bash
            helm repo add my-charts https://github.com/${{ github.repository }}/releases/download/mosquitto-v${{ steps.version-check.outputs.version }}/
            helm install mosquitto my-charts/mosquitto
            ```
            
            ### What's Changed
            - Chart version bumped to ${{ steps.version-check.outputs.version }}
            - See commit history for detailed changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}