suite: test service
templates:
  - service.yaml
tests:
  - it: should create service with default values
    asserts:
      - isKind:
          of: Service
      - equal:
          path: metadata.name
          value: RELEASE-NAME-mosquitto
      - equal:
          path: spec.type
          value: ClusterIP

  - it: should only expose enabled ports
    set:
      service.ports.mqtt.enabled: true
      service.ports.mqttTls.enabled: false
      service.ports.websocket.enabled: false
    asserts:
      - contains:
          path: spec.ports
          content:
            name: mqtt
            port: 1883
            targetPort: 1883
            protocol: TCP
      - notContains:
          path: spec.ports
          content:
            name: mqttTls
      - notContains:
          path: spec.ports
          content:
            name: websocket

  - it: should expose all ports when enabled
    set:
      service.ports.mqtt.enabled: true
      service.ports.mqttTls.enabled: true
      service.ports.websocket.enabled: true
    asserts:
      - contains:
          path: spec.ports
          content:
            name: mqtt
            port: 1883
            targetPort: 1883
            protocol: TCP
      - contains:
          path: spec.ports
          content:
            name: mqttTls
            port: 8883
            targetPort: 8883
            protocol: TCP
      - contains:
          path: spec.ports
          content:
            name: websocket
            port: 9001
            targetPort: 9001
            protocol: TCP

  - it: should use custom service type
    set:
      service.type: LoadBalancer
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer

  - it: should use custom port numbers
    set:
      service.ports.mqtt.port: 1884
      service.ports.mqtt.targetPort: 1884
    asserts:
      - contains:
          path: spec.ports
          content:
            name: mqtt
            port: 1884
            targetPort: 1884
            protocol: TCP

  - it: should be headless when using statefulset
    set:
      workload.type: StatefulSet
    asserts:
      - equal:
          path: spec.clusterIP
          value: None

  - it: should not be headless when using deployment
    set:
      workload.type: Deployment
    asserts:
      - isNull:
          path: spec.clusterIP

  - it: should apply service annotations
    set:
      service.annotations:
        metallb.universe.tf/address-pool: "production"
        custom.annotation: "value"
    asserts:
      - equal:
          path: metadata.annotations["metallb.universe.tf/address-pool"]
          value: "production"
      - equal:
          path: metadata.annotations["custom.annotation"]
          value: "value"

  - it: should set loadBalancerIP when specified
    set:
      service.type: LoadBalancer
      service.loadBalancerIP: "192.168.1.100"
    asserts:
      - equal:
          path: spec.loadBalancerIP
          value: "192.168.1.100"

  - it: should not set loadBalancerIP for ClusterIP
    set:
      service.type: ClusterIP
      service.loadBalancerIP: "192.168.1.100"
    asserts:
      - isNull:
          path: spec.loadBalancerIP

  - it: should set loadBalancerSourceRanges when specified
    set:
      service.type: LoadBalancer
      service.loadBalancerSourceRanges:
        - "10.0.0.0/8"
        - "192.168.0.0/16"
    asserts:
      - equal:
          path: spec.loadBalancerSourceRanges[0]
          value: "10.0.0.0/8"
      - equal:
          path: spec.loadBalancerSourceRanges[1]
          value: "192.168.0.0/16"

  - it: should set externalTrafficPolicy for LoadBalancer
    set:
      service.type: LoadBalancer
      service.externalTrafficPolicy: Local
    asserts:
      - equal:
          path: spec.externalTrafficPolicy
          value: Local

  - it: should set externalTrafficPolicy for NodePort
    set:
      service.type: NodePort
      service.externalTrafficPolicy: Local
    asserts:
      - equal:
          path: spec.externalTrafficPolicy
          value: Local

  - it: should not set externalTrafficPolicy for ClusterIP
    set:
      service.type: ClusterIP
      service.externalTrafficPolicy: Local
    asserts:
      - isNull:
          path: spec.externalTrafficPolicy

  - it: should set sessionAffinity when specified
    set:
      service.sessionAffinity: ClientIP
    asserts:
      - equal:
          path: spec.sessionAffinity
          value: ClientIP

  - it: should set nodePort when service type is NodePort
    set:
      service.type: NodePort
      service.ports.mqtt.nodePort: 31883
      service.ports.mqttTls.enabled: true
      service.ports.mqttTls.nodePort: 31884
    asserts:
      - contains:
          path: spec.ports
          content:
            name: mqtt
            port: 1883
            targetPort: 1883
            protocol: TCP
            nodePort: 31883
      - contains:
          path: spec.ports
          content:
            name: mqttTls
            port: 8883
            targetPort: 8883
            protocol: TCP
            nodePort: 31884

  - it: should not set nodePort for ClusterIP
    set:
      service.type: ClusterIP
      service.ports.mqtt.nodePort: 31883
    asserts:
      - contains:
          path: spec.ports
          content:
            name: mqtt
            port: 1883
            targetPort: 1883
            protocol: TCP
      - notContains:
          path: spec.ports
          content:
            nodePort: 31883